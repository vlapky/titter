{"version":3,"sources":["redux/actions/SingIn.ts","containters/Login.tsx","icons/close.svg","icons/heart.svg","components/Posts.tsx","components/FeedButtons.tsx","redux/actions/LikePost.ts","redux/actions/DelPost.ts","functions/PostsFuncs.ts","containters/Feed.tsx","components/Input.tsx","components/ProfileName.tsx","components/ProfileButtons.tsx","components/ProfileLinks.tsx","components/ProfileSubs.tsx","redux/actions/SignOut.ts","redux/actions/AddPost.ts","redux/actions/ChangeName.ts","redux/actions/Subscribe.ts","redux/actions/Unsubscribe.ts","containters/Profile.tsx","containters/Subs.tsx","App.tsx","redux/InitialState.ts","redux/RootReducer.ts","redux/Store.ts","index.tsx"],"names":["SignIn","createAction","Login","dispatch","useDispatch","React","useState","signInValue","changeSignIn","acceptSend","length","className","htmlFor","maxLength","value","onChange","e","target","onKeyPress","key","id","type","placeholder","disabled","onClick","Posts","posts","likePost","delPost","currentUser","slice","reverse","map","authorId","author","text","liked","to","src","del","alt","like","join","FeedButtons","postsType","changeType","LikePost","DelPost","PostsFuncs","ExtractPost","users","postData","byId","name","FilterUsersPosts","usersIds","allIds","filter","includes","GeneratePosts","postsIds","Feed","useSelector","state","changePostsType","allPosts","subsPosts","subscribedTo","Input","send","cancel","changeText","autoFocus","ProfileName","userName","changeName","profileState","inputVisible","changeVisible","handleClick","ProfileButtons","handleSignOut","handleAddPost","handleSub","handleUnsub","ProfileLinks","subs","curId","ProfileSubs","subscribedToLen","subscribersLen","subscribers","SignOut","AddPost","ChangeName","Subscribe","Unsubscribe","Profile","useParams","userId","GetProfileState","userPostsIds","userPosts","Subs","subsList","subsType","GetSubsList","sub","App","loginUser","exact","path","component","InitialState","user1","user2","post1","post2","createReducer","action","forEach","payload","newUserId","push","subUser","indexSubUser","indexOf","splice","indexCurUser","postId","Date","getUTCMilliseconds","delPostId","indexDelPost","likePostId","indexLike","newName","acceptName","loadState","serializedState","localStorage","getItem","JSON","parse","Error","loadFromLocalStorage","Store","configureStore","reducer","rootReducer","preloadedState","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.3b18bcc5.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const SignIn = createAction<string>('SIGN_IN')\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { SignIn } from '../redux/actions/SingIn'\r\nimport '../styles/Login.scss'\r\n\r\nexport const Login: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const [signInValue, changeSignIn] = React.useState('')\r\n\r\n  const acceptSend = signInValue.length > 3\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    changeSignIn(e.target.value)\r\n  }\r\n  const handleSend = () => {\r\n    dispatch(SignIn(signInValue))\r\n    changeSignIn('')\r\n  }\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      if (acceptSend) {\r\n        dispatch(SignIn(signInValue))\r\n        changeSignIn('')\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <label htmlFor=\"name\" className=\"Login__title\">\r\n        Введите имя\r\n      </label>\r\n      <input\r\n        maxLength={12}\r\n        value={signInValue}\r\n        onChange={handleChange}\r\n        onKeyPress={handleKeyPress}\r\n        className=\"Login__input\"\r\n        id=\"name\"\r\n        type=\"text\"\r\n        placeholder=\"vlapky\"\r\n      />\r\n      <button disabled={!acceptSend} onClick={handleSend} className=\"button\">\r\n        Продолжить\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/close.1d546531.svg\";","export default __webpack_public_path__ + \"static/media/heart.fb824694.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IPostsProps } from '../interfaces/IPostProps'\r\nimport del from '../icons/close.svg'\r\nimport like from '../icons/heart.svg'\r\nimport '../styles/Post.scss'\r\n\r\nexport const Posts: React.FC<IPostsProps> = ({\r\n  posts,\r\n  likePost,\r\n  delPost,\r\n  currentUser,\r\n}) => {\r\n  return (\r\n    <ul>\r\n      {posts\r\n        .slice(0)\r\n        .reverse()\r\n        .map(({ id, authorId, author, text, liked }) => (\r\n          <li key={id} className=\"Post\">\r\n            <article>\r\n              <div className=\"Post__head\">\r\n                <Link className=\"Post__head_user\" to={`/${authorId}`}>\r\n                  {author}\r\n                </Link>\r\n                {currentUser === authorId && (\r\n                  <img\r\n                    onClick={() => delPost(id)}\r\n                    src={del}\r\n                    alt=\"delete\"\r\n                    className=\"Post__head_icon\"\r\n                  />\r\n                )}\r\n                <img\r\n                  onClick={() => likePost(id)}\r\n                  src={like}\r\n                  alt=\"like\"\r\n                  className=\"Post__head_icon\"\r\n                />\r\n              </div>\r\n              <p className=\"Post_text\">{text}</p>\r\n              <p className=\"Post_liked\">\r\n                {`Понравилось: `}\r\n                <span>{liked.join(', ')}</span>\r\n              </p>\r\n            </article>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IFeedButtonsProps } from '../interfaces/IFeedButtonsProps'\r\n\r\nexport const FeedButtons: React.FC<IFeedButtonsProps> = ({\r\n  postsType,\r\n  changeType,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => changeType('all')}\r\n        className={`button feedbutton ${postsType === 'all' && 'active'}`}\r\n      >\r\n        Все посты\r\n      </button>\r\n      <button\r\n        onClick={() => changeType('subs')}\r\n        className={`button feedbutton ${postsType === 'subs' && 'active'}`}\r\n      >\r\n        Подписки\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const LikePost = createAction<string>('LIKE_POST')\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const DelPost = createAction<string>('DEL_POST')\r\n","const PostsFuncs = {\r\n  ExtractPost: function ExtractPost(id: string, posts: any, users: any) {\r\n    let postData = posts.byId[id]\r\n    return {\r\n      id: postData.id,\r\n      authorId: postData.author,\r\n      author: users.byId[postData.author].name,\r\n      text: postData.text,\r\n      liked: postData.liked.map((id: string) => users.byId[id].name),\r\n    }\r\n  },\r\n\r\n  FilterUsersPosts: function FilterUsersPosts(\r\n    usersIds: Array<string>,\r\n    posts: any\r\n  ) {\r\n    return posts.allIds.filter((id: string) =>\r\n      usersIds.includes(posts.byId[id].author)\r\n    )\r\n  },\r\n\r\n  GeneratePosts: function GeneratePosts(\r\n    postsIds: Array<string>,\r\n    posts: any,\r\n    users: any\r\n  ) {\r\n    let postsArray = postsIds.map((id: string) => {\r\n      return this.ExtractPost(id, posts, users)\r\n    })\r\n    return postsArray\r\n  },\r\n}\r\n\r\nexport default PostsFuncs\r\n","import React from 'react'\r\nimport '../styles/Feed.scss'\r\nimport { Posts } from '../components/Posts'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { IState } from '../interfaces/IState'\r\nimport { FeedButtons } from '../components/FeedButtons'\r\nimport { LikePost } from '../redux/actions/LikePost'\r\nimport { DelPost } from '../redux/actions/DelPost'\r\nimport PostsFuncs from '../functions/PostsFuncs'\r\n\r\nexport const Feed: React.FC = () => {\r\n  const users = useSelector((state: IState) => state.users)\r\n  const posts = useSelector((state: IState) => state.posts)\r\n  const dispatch = useDispatch()\r\n\r\n  const [postsType, changePostsType] = React.useState('all')\r\n  const currentUser = users.currentUser\r\n  const allPosts: any = PostsFuncs.GeneratePosts(posts.allIds, posts, users)\r\n  const subsPosts: any = PostsFuncs.GeneratePosts(\r\n    PostsFuncs.FilterUsersPosts(\r\n      [...users.byId[users.currentUser].subscribedTo, users.currentUser],\r\n      posts\r\n    ),\r\n    posts,\r\n    users\r\n  )\r\n\r\n  const handleLikePost = (id: string) => {\r\n    dispatch(LikePost(id))\r\n  }\r\n\r\n  const handleDelPost = (id: string) => {\r\n    dispatch(DelPost(id))\r\n  }\r\n\r\n  return (\r\n    <div className=\"Feed\">\r\n      <Link className=\"link\" to={`/${currentUser}`}>\r\n        В профиль\r\n      </Link>\r\n      <FeedButtons postsType={postsType} changeType={changePostsType} />\r\n      <Posts\r\n        posts={postsType === 'all' ? allPosts : subsPosts}\r\n        currentUser={currentUser}\r\n        likePost={handleLikePost}\r\n        delPost={handleDelPost}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport IInputProps from '../interfaces/IInputProps'\r\nimport '../styles/Input.scss'\r\n\r\nexport const Input: React.FC<IInputProps> = ({ type, send, cancel }) => {\r\n  const [text, changeText] = React.useState<string>('')\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    changeText(e.target.value)\r\n  }\r\n\r\n  const handleSend = () => {\r\n    if (acceptSend) {\r\n      send(text)\r\n      changeText('')\r\n      cancel()\r\n    }\r\n  }\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      if (acceptSend) {\r\n        send(text)\r\n        changeText('')\r\n        cancel()\r\n      }\r\n    }\r\n  }\r\n\r\n  let acceptSend = text.length > 3\r\n  let maxLength = type === 'post' ? 80 : type === 'name' ? 12 : 0\r\n\r\n  return (\r\n    <div className=\"Input\">\r\n      <input\r\n        type=\"text\"\r\n        autoFocus\r\n        value={text}\r\n        onChange={handleChange}\r\n        onKeyPress={handleKeyPress}\r\n        maxLength={maxLength}\r\n        placeholder={\r\n          type === 'post' ? 'Новый пост' : type === 'name' ? 'Новое имя' : ''\r\n        }\r\n        className=\"Input__input\"\r\n      />\r\n      <div className=\"Input__buttons\">\r\n        <button\r\n          onClick={handleSend}\r\n          disabled={!acceptSend}\r\n          className=\"button button_send\"\r\n        >\r\n          {type === 'post' ? 'Добавить пост' : type === 'name' ? 'Сменить' : ''}\r\n        </button>\r\n        <button onClick={cancel} className=\"button button_cancel\">\r\n          Отмена\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IProfileName } from '../interfaces/IProfileName'\r\nimport { Input } from './Input'\r\n\r\nexport const ProfileName: React.FC<IProfileName> = ({\r\n  userName,\r\n  changeName,\r\n  profileState,\r\n}) => {\r\n  const [inputVisible, changeVisible] = React.useState<Boolean>(false)\r\n\r\n  const handleClick = () => {\r\n    if (profileState === 'YOUR') changeVisible(!inputVisible)\r\n  }\r\n  return (\r\n    <>\r\n      <p onClick={handleClick} className=\"Profile__user\">\r\n        {userName}\r\n      </p>\r\n      {inputVisible && (\r\n        <Input type=\"name\" send={changeName} cancel={handleClick} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IProfileButtonsProps } from '../interfaces/IProfileButtonsProps'\r\nimport { Input } from './Input'\r\n\r\nexport const ProfileButtons: React.FC<IProfileButtonsProps> = ({\r\n  profileState,\r\n  handleSignOut,\r\n  handleAddPost,\r\n  handleSub,\r\n  handleUnsub,\r\n}) => {\r\n  const [inputVisible, changeVisible] = React.useState<Boolean>(false)\r\n\r\n  return (\r\n    <>\r\n      {profileState === 'YOUR' && (\r\n        <>\r\n          <button onClick={handleSignOut} className=\"button\">\r\n            Выйти\r\n          </button>\r\n          {!inputVisible && (\r\n            <button onClick={() => changeVisible(true)} className=\"button\">\r\n              Добавить пост\r\n            </button>\r\n          )}\r\n          {inputVisible && (\r\n            <Input\r\n              type=\"post\"\r\n              cancel={() => changeVisible(false)}\r\n              send={handleAddPost}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n      {profileState === 'SUB' && (\r\n        <button onClick={handleUnsub} className=\"button\">\r\n          Отписаться\r\n        </button>\r\n      )}\r\n      {profileState === 'NONE' && (\r\n        <button onClick={handleSub} className=\"button\">\r\n          Подписаться\r\n        </button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IProfileLinksProps } from '../interfaces/IProfileLinksProps'\r\n\r\nexport const ProfileLinks: React.FC<IProfileLinksProps> = ({ subs, curId }) => {\r\n  return (\r\n    <>\r\n      {!subs && (\r\n        <Link className=\"link\" to=\"/feed\">\r\n          В ленту\r\n        </Link>\r\n      )}\r\n      {subs && (\r\n        <Link className=\"link\" to={`/${curId}/${subs}`}>\r\n          Назад\r\n        </Link>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IProfileSubsProps } from '../interfaces/IProfileSubsProps'\r\n\r\nexport const ProfileSubs: React.FC<IProfileSubsProps> = ({ id, users }) => {\r\n  const subscribedToLen = users.byId[id].subscribedTo.length\r\n  const subscribersLen = users.byId[id].subscribers.length\r\n\r\n  return (\r\n    <>\r\n      <Link to={`/${id}/subscribedTo`} className=\"link\">\r\n        Подписки - {subscribedToLen} пользователей\r\n      </Link>\r\n      <Link to={`/${id}/subscribers`} className=\"link\">\r\n        Подписчики - {subscribersLen} пользователей\r\n      </Link>\r\n    </>\r\n  )\r\n}\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const SignOut = createAction<void>('SIGN_OUT')\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const AddPost = createAction<Object>('ADD_POST')\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const ChangeName = createAction<string>('CHANGE_NAME')\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const Subscribe = createAction<string>('SUB')\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const Unsubscribe = createAction<string>('UNSUB')\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { IState } from '../interfaces/IState'\r\nimport '../styles/Profile.scss'\r\nimport { IRouteParams } from '../interfaces/IRouteParams'\r\n\r\nimport { Posts } from '../components/Posts'\r\nimport { ProfileName } from '../components/ProfileName'\r\nimport { ProfileButtons } from '../components/ProfileButtons'\r\nimport { ProfileLinks } from '../components/ProfileLinks'\r\nimport { ProfileSubs } from '../components/ProfileSubs'\r\n\r\nimport { SignOut } from '../redux/actions/SignOut'\r\nimport { LikePost } from '../redux/actions/LikePost'\r\nimport { AddPost } from '../redux/actions/AddPost'\r\nimport { DelPost } from '../redux/actions/DelPost'\r\nimport { ChangeName } from '../redux/actions/ChangeName'\r\nimport { Subscribe } from '../redux/actions/Subscribe'\r\nimport { Unsubscribe } from '../redux/actions/Unsubscribe'\r\nimport PostsFuncs from '../functions/PostsFuncs'\r\n\r\nexport const Profile: React.FC = () => {\r\n  function GetProfileState(userId: string, users: any) {\r\n    if (userId === users.currentUser) {\r\n      return 'YOUR'\r\n    } else if (users.byId[users.currentUser].subscribedTo.includes(userId)) {\r\n      return 'SUB'\r\n    } else return 'NONE'\r\n  }\r\n\r\n  const { id, subs, curId } = useParams<IRouteParams>()\r\n\r\n  const users = useSelector((state: IState) => state.users)\r\n  const posts = useSelector((state: IState) => state.posts)\r\n  const dispatch = useDispatch()\r\n\r\n  const profileState = GetProfileState(id, users)\r\n  const userPostsIds = PostsFuncs.FilterUsersPosts([id], posts)\r\n  const userPosts = PostsFuncs.GeneratePosts(userPostsIds, posts, users)\r\n  const userName = users.byId[id].name\r\n\r\n  const handleLikePost = (id: string) => {\r\n    dispatch(LikePost(id))\r\n  }\r\n  const handleAddPost = (text: string) => {\r\n    dispatch(AddPost(text))\r\n  }\r\n  const handleDelPost = (id: string) => {\r\n    dispatch(DelPost(id))\r\n  }\r\n  const handleChangeName = (text: string) => {\r\n    dispatch(ChangeName(text))\r\n  }\r\n  const handleSub = () => {\r\n    dispatch(Subscribe(id))\r\n  }\r\n  const handleUnsub = () => {\r\n    dispatch(Unsubscribe(id))\r\n  }\r\n  const handleSignOut = () => {\r\n    dispatch(SignOut())\r\n  }\r\n\r\n  return (\r\n    <div className=\"Profile\">\r\n      <ProfileLinks subs={subs} curId={curId} />\r\n      <ProfileName\r\n        userName={userName}\r\n        profileState={profileState}\r\n        changeName={handleChangeName}\r\n      />\r\n      <ProfileSubs id={id} users={users} />\r\n      <ProfileButtons\r\n        profileState={profileState}\r\n        handleAddPost={handleAddPost}\r\n        handleSub={handleSub}\r\n        handleUnsub={handleUnsub}\r\n        handleSignOut={handleSignOut}\r\n      />\r\n      <Posts\r\n        posts={userPosts}\r\n        currentUser={users.currentUser}\r\n        likePost={handleLikePost}\r\n        delPost={handleDelPost}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { IRouteParams } from '../interfaces/IRouteParams'\r\nimport { IState } from '../interfaces/IState'\r\nimport '../styles/Subs.scss'\r\n\r\nexport const Subs: React.FC = () => {\r\n  const { id, subs } = useParams<IRouteParams>()\r\n  const users = useSelector((state: IState) => state.users)\r\n  const subsList = GetSubsList(id, subs, users)\r\n\r\n  function GetSubsList(userId: string, subsType: string, users: any) {\r\n    const subs = users.byId[userId][subsType]\r\n    return subs.map((id: string) => ({\r\n      userId: id,\r\n      name: users.byId[id].name,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"Subs\">\r\n      <Link className=\"link\" to={`/${id}`}>\r\n        Назад\r\n      </Link>\r\n      <ul className=\"Subs__list\">\r\n        {subsList.map((sub: any) => (\r\n          <li key={sub.userId} className=\"Subs__list_item\">\r\n            <Link className=\"link\" to={`/${id}/${subs}/${sub.userId}`}>\r\n              {sub.name}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport './styles/App.scss'\nimport { HashRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { IState } from './interfaces/IState'\nimport { Login } from './containters/Login'\nimport { Feed } from './containters/Feed'\nimport { Profile } from './containters/Profile'\nimport { Subs } from './containters/Subs'\n\nconst App: React.FC = () => {\n  const loginUser = useSelector((state: IState) => state.users.currentUser)\n  return (\n    <main className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/login\" component={Login}>\n            {loginUser && <Redirect to=\"/feed\" />}\n          </Route>\n          {!loginUser && <Redirect to=\"/login\" />}\n          <Route exact path=\"/feed\" component={Feed} />\n          <Route exact path=\"/:id\" component={Profile} />\n          <Route exact path=\"/:id/:subs\" component={Subs} />\n          <Route exact path=\"/:curId/:subs/:id\" component={Profile} />\n          <Route path=\"/\">\n            <Redirect to=\"/login\" />\n          </Route>\n        </Switch>\n      </Router>\n    </main>\n  )\n}\n\nexport default App\n","import { IState } from '../interfaces/IState'\r\n\r\nexport const InitialState: IState = {\r\n  users: {\r\n    currentUser: '',\r\n    byId: {\r\n      user1: { name: 'vlapky', subscribedTo: [], subscribers: ['user2'] },\r\n      user2: { name: 'Kiva', subscribedTo: ['user1'], subscribers: [] },\r\n    },\r\n    allIds: ['user1', 'user2'],\r\n  },\r\n  posts: {\r\n    byId: {\r\n      post1: {\r\n        id: 'post1',\r\n        author: 'user1',\r\n        text: 'Welcome to Titter by vlapky',\r\n        liked: ['user1', 'user2'],\r\n      },\r\n      post2: {\r\n        id: 'post2',\r\n        author: 'user2',\r\n        text: 'Welcome to Titter by vlapky by Kiva',\r\n        liked: ['user2', 'user1'],\r\n      },\r\n    },\r\n    allIds: ['post1', 'post2'],\r\n  },\r\n}\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { AddPost } from './actions/AddPost'\r\nimport { ChangeName } from './actions/ChangeName'\r\nimport { DelPost } from './actions/DelPost'\r\nimport { SignOut } from './actions/SignOut'\r\nimport { SignIn } from './actions/SingIn'\r\nimport { Subscribe } from './actions/Subscribe'\r\nimport { Unsubscribe } from './actions/Unsubscribe'\r\nimport { LikePost } from './actions/LikePost'\r\nimport { InitialState } from './InitialState'\r\n\r\nexport default createReducer(InitialState, {\r\n  [SignIn.type]: (state, action) => {\r\n    //Вход старого пользователя\r\n    state.users.allIds.forEach((id: string) => {\r\n      let user = state.users.byId[id]\r\n      if (user.name === action.payload) {\r\n        state.users.currentUser = id\r\n      }\r\n    })\r\n    //Регистрация нового пользователя\r\n    if (state.users.currentUser === '') {\r\n      const newUserId: string = `user${state.users.allIds.length + 1}`\r\n\r\n      state.users.allIds.push(newUserId)\r\n      state.users.byId[newUserId] = {\r\n        name: action.payload,\r\n        subscribedTo: [],\r\n        subscribers: [],\r\n      }\r\n\r\n      state.users.currentUser = newUserId\r\n    }\r\n  },\r\n\r\n  [SignOut.type]: (state) => {\r\n    state.users.currentUser = ''\r\n  },\r\n\r\n  [Subscribe.type]: (state, action) => {\r\n    const currentUser = state.users.currentUser\r\n    const subUser = action.payload\r\n\r\n    state.users.byId[currentUser].subscribedTo.push(subUser)\r\n    state.users.byId[subUser].subscribers.push(currentUser)\r\n  },\r\n\r\n  [Unsubscribe.type]: (state, action) => {\r\n    const currentUser = state.users.currentUser\r\n    const subUser = action.payload\r\n\r\n    const indexSubUser = state.users.byId[currentUser].subscribedTo.indexOf(\r\n      subUser\r\n    )\r\n    state.users.byId[currentUser].subscribedTo.splice(indexSubUser, 1)\r\n\r\n    const indexCurUser = state.users.byId[subUser].subscribers.indexOf(\r\n      currentUser\r\n    )\r\n    state.users.byId[subUser].subscribers.splice(indexCurUser, 1)\r\n  },\r\n\r\n  [AddPost.type]: (state, action) => {\r\n    const postId = `${new Date().getUTCMilliseconds()}`\r\n\r\n    state.posts.allIds.push(postId)\r\n    state.posts.byId[postId] = {\r\n      id: postId,\r\n      author: state.users.currentUser,\r\n      text: action.payload,\r\n      liked: [],\r\n    }\r\n  },\r\n\r\n  [DelPost.type]: (state, action) => {\r\n    const delPostId = action.payload\r\n    const indexDelPost = state.posts.allIds.indexOf(delPostId)\r\n\r\n    state.posts.allIds.splice(indexDelPost, 1)\r\n    delete state.posts.byId[delPostId]\r\n  },\r\n\r\n  [LikePost.type]: (state, action) => {\r\n    const likePostId = action.payload\r\n    const currentUser = state.users.currentUser\r\n    const indexLike = state.posts.byId[likePostId].liked.indexOf(currentUser)\r\n\r\n    if (indexLike === -1) {\r\n      //если лайк не стоит, поставить\r\n      state.posts.byId[likePostId].liked.push(currentUser)\r\n    } else {\r\n      //если лайк стоит, убрать\r\n      state.posts.byId[likePostId].liked.splice(indexLike, 1)\r\n    }\r\n  },\r\n\r\n  [ChangeName.type]: (state, action) => {\r\n    const newName = action.payload\r\n    const currentUser = state.users.currentUser\r\n    let acceptName = true\r\n    //проверка доступности имени\r\n    state.users.allIds.forEach((userId) => {\r\n      if (state.users.byId[userId].name === newName) acceptName = false\r\n    })\r\n    //замена имени\r\n    if (acceptName) state.users.byId[currentUser].name = newName\r\n  },\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { InitialState } from './InitialState'\r\nimport rootReducer from './RootReducer'\r\n\r\nconst loadFromLocalStorage: any = () => {\r\n  try {\r\n    const serializedState: any = localStorage.getItem('titter-storage')\r\n    return JSON.parse(serializedState)\r\n  } catch (e) {\r\n    throw new Error(e)\r\n  }\r\n}\r\n\r\nconst saveToLocalStorage: any = (state: any) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('titter-storage', serializedState)\r\n  } catch (e) {\r\n    throw new Error(e)\r\n  }\r\n}\r\n\r\nconst loadState = loadFromLocalStorage()\r\nconst state = loadState ? loadState : InitialState\r\n\r\nexport const Store = configureStore({\r\n  reducer: rootReducer,\r\n  preloadedState: state,\r\n})\r\n\r\nStore.subscribe(() => {\r\n  saveToLocalStorage(Store.getState())\r\n})\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.scss'\nimport { Store } from './redux/Store'\nimport { Provider } from 'react-redux'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}